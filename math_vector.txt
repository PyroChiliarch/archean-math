; Vector2, 3 or 4 Library
; Use vectors with 2, 3, or 4 values

; For sake of less repetition, there is no vec2/vec3/vec4
; All are Vectors have 4 values, if you want a vec2 (Vector with only x,y) axis just use x,y and ignore z,w






; ===== Constructors

const $vec_zero = ".x{0}.y{0}.z{0}.w{0}"









; ===== Vector Properties



; Get the magnitude of the vector
function @vec_magnitude ($vec:text):number
	return abs(sqrt(($vec.x * $vec.x) + ($vec.y * $vec.y) + ($vec.z * $vec.z) + ($vec.w * $vec.w)))



; Get the squared magnitude of the vector
; Is faster than @vec_magnitude because it skips the sqrt
function @vec_sqr_magnitude ($vec:text):number
	return abs(($vec.x * $vec.x) + ($vec.y * $vec.y) + ($vec.z * $vec.z) + ($vec.w * $vec.w)))



; Get the normal of the vector
; Normal is the same vector but with a magnitude of 1
function @vec_normal ($vec:text):text
	var $result = $vec
	var $magnitude =  @vec_magnitude($result)
	
	; IFs are to make sure we dont divide by zero
	; if value is already zero its fine we can leave it
	if $result.x
		$result.x /= $magnitude
	if $result.y
		$result.y /= $magnitude
	if $result.z
		$result.z /= $magnitude
	if $result.w
		$result.w /= $magnitude

	return $result








; ===== Vector Maths



; Add vectors together
function @vec_add($vec_0:text, $vec_1:text):text
	var $result = $vec_0
	$result.x += $vec_1.x
	$result.y += $vec_1.y
	$result.z += $vec_1.z
	$result.w += $vec_1.w
	return $result



; Subtract second vector from first vector
function @vec_subtract($vec_0:text, $vec_1:text):text
	var $result = $vec_0
	$result.x -= $vec_1.x
	$result.y -= $vec_1.y
	$result.z -= $vec_1.z
	$result.w -= $vec_1.w
	return $result



; Calculate distance between 2 vectors
function @vec_distance($vec_0:text, $vec_1:text):number
	var $dist_vec = @vec_subtract($vec_0, $vec_1)
	return @vec_magnitude($dist_vec)






; ===== Vector conditionals

; Check if Vectors are equal
; Equal if magnitudes are within 1 millimeter (1 = 1 Meter)
function @vec_equal($vec_0:text, $vec_1:text):number
	var $result = $vec_0
	$result.x -= $vec_1.x
	$result.y -= $vec_1.y
	$result.z -= $vec_1.z
	$result.w -= $vec_1.w
	
	if @vec_sqr_magnitude($result) < 0.001
		return 1 ; true, they are equal
	else
		return 0 ; false, vec are not equal
	return $result
	